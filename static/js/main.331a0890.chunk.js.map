{"version":3,"sources":["components/Header.js","components/Footer.js","components/Loading.js","App.js","serviceWorker.js","index.js","models/index.js","stores/user.js","stores/history.js","stores/image.js","stores/auth.js","stores/index.js","components/logo.svg"],"names":["StyleHeader","styled","header","StyleLogo","img","StyleLink","NavLink","StyleDiv","div","StyleButton","Button","Header","observer","useStores","userStore","authStore","history","useHistory","useEffect","pullUser","src","logo","to","activeClassName","exact","currentUser","attributes","username","ghost","onClick","logout","type","push","StyleFooter","footer","Footer","Loading","Home","lazy","History","About","Login","Register","App","fallback","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","AV","init","appId","appKey","serverURL","Auth","password","user","User","setUsername","setPassword","Promise","resolve","reject","signUp","loginedUser","logIn","logOut","current","Uploader","add","file","filename","item","Object","avFile","File","set","save","serverFile","find","page","limit","query","Query","include","skip","equalTo","result","this","observable","action","historyStore","newList","list","concat","isLoading","append","length","hasMore","finally","imageStore","newFilename","newFile","isUploading","err","values","reset","stores","context","createContext","useContext","module","exports"],"mappings":"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","file":"static/js/main.331a0890.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport logo from './logo.svg'\r\nimport styled from 'styled-components'\r\nimport { NavLink, useHistory } from 'react-router-dom'\r\nimport { Button } from 'antd';\r\nimport { useStores } from '../stores'\r\nimport { observer } from 'mobx-react'\r\n\r\n\r\nconst StyleHeader = styled.header`\r\nbackground-color:#303841;\r\ndisplay:flex;\r\nalign-items:center;\r\npadding:10px 5vw;\r\n`\r\nconst StyleLogo = styled.img`\r\nheight:25px;\r\n`\r\nconst StyleLink = styled(NavLink)`\r\ncolor:#fff;\r\nmargin-left:3vw;\r\n&.active{\r\n  border-bottom:1px solid #fff;\r\n}\r\n`\r\nconst StyleDiv = styled.div`\r\n  margin-left:auto;\r\n  color:orange;\r\n`\r\nconst StyleButton = styled(Button)`\r\n  margin-left:10px;\r\n`\r\nconst Header = observer(() => {\r\n  const { userStore, authStore } = useStores()\r\n  const history = useHistory()\r\n  const clickLogout = () => {\r\n    authStore.logout()\r\n  }\r\n  const clickLogin = () => {\r\n    history.push('./login') //跳转到登录页\r\n  }\r\n  const clickRegister = () => {\r\n    history.push('./register') //跳转到注册页\r\n  }\r\n  useEffect(() => {\r\n    userStore.pullUser();\r\n  }, [])\r\n\r\n  return (\r\n    <StyleHeader>\r\n      <StyleLogo src={logo} />\r\n      <nav>\r\n        <StyleLink to='/' activeClassName='active' exact>首页</StyleLink>\r\n        <StyleLink to='/history' activeClassName='active'>上传历史</StyleLink>\r\n        <StyleLink to='/about' activeClassName='active'>关于</StyleLink>\r\n      </nav>\r\n      <StyleDiv>\r\n        {\r\n          userStore.currentUser ? <>\r\n            {userStore.currentUser.attributes.username} <StyleButton ghost onClick={clickLogout}>注销</StyleButton>\r\n          </> : <>\r\n              <StyleButton type=\"primary\" onClick={clickLogin}>登录</StyleButton>\r\n              <StyleButton type=\"primary\" onClick={clickRegister}>注册</StyleButton>\r\n            </>\r\n        }\r\n      </StyleDiv>\r\n    </StyleHeader>\r\n  )\r\n})\r\n\r\nexport default Header","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyleFooter = styled.footer`\r\nfont-size:12px;\r\ntext-align:center;\r\ncolor:#aaa;\r\npadding:10px\r\n`\r\n\r\nfunction Footer() {\r\n  return (\r\n    <StyleFooter>\r\n      Figbed\r\n    </StyleFooter>\r\n  )\r\n}\r\n\r\nexport default Footer","import React from 'react'\r\n\r\nfunction Loading() {\r\n  return (\r\n    <div>\r\n      loading...\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loading","import React, { Suspense, lazy } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Loading from './components/Loading'\nimport { Switch, Route } from 'react-router-dom';\n\nconst Home = lazy(() => import('./pages/Home'))\nconst History = lazy(() => import('./pages/History'))\nconst About = lazy(() => import('./pages/About'))\nconst Login = lazy(() => import('./pages/Login'))\nconst Register = lazy(() => import('./pages/Register'))\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <main>\n        <Suspense fallback={<Loading />}>\n          <Switch>\n            <Route path='/' exact component={Home} />\n            <Route path='/history' component={History} />\n            <Route path='/about' component={About} />\n            <Route path='/login' component={Login} />\n            <Route path='/register' component={Register} />\n          </Switch>\n        </Suspense>\n      </main>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  HashRouter as Router\n} from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n","import AV, { Query, User } from 'leancloud-storage'\r\n\r\n\r\nAV.init({\r\n  appId: \"zJqDdcsxKpmWuNkGQObP66my-9Nh9j0Va\",\r\n  appKey: \"1w1gfgPTbQFyaG87RV5V0hGI\",\r\n  serverURL: \"https://zjqddcsx.lc-cn-e1-shared.com\"\r\n});\r\n\r\nconst Auth = {\r\n  register(username, password) {\r\n    let user = new User()\r\n    user.setUsername(username)\r\n    user.setPassword(password)\r\n    return new Promise((resolve, reject) => {\r\n      user.signUp().then(loginedUser => resolve(loginedUser), error => reject(error))\r\n    })\r\n  },\r\n\r\n  login(username, password) {\r\n    return new Promise((resolve, reject) => {\r\n      User.logIn(username, password).then(loginedUser => resolve(loginedUser), error => reject(error))\r\n    })\r\n  },\r\n  logout() {\r\n    User.logOut()\r\n  },\r\n  getCurrentUser() {\r\n    return User.current()\r\n  }\r\n}\r\n\r\nconst Uploader = {\r\n  add(file, filename) {\r\n    const item = new AV.Object('Image')\r\n    const avFile = new AV.File(filename, file)\r\n    item.set('filename', filename)\r\n    item.set('owner', AV.User.current())\r\n    item.set('url', avFile)\r\n    return new Promise((resolve, reject) => {\r\n      item.save().then(serverFile => resolve(serverFile), error => reject(error))\r\n    })\r\n  },\r\n  find({ page = 0, limit = 10 }) {\r\n    const query = new AV.Query(\"Image\")\r\n    query.include('owner')\r\n    query.limit(limit)\r\n    query.skip(page * limit)\r\n    query.equalTo('owner', AV.User.current())\r\n    return new Promise((resolve, reject) => {\r\n      query.find().then(result => resolve(result), error => reject(error))\r\n    })\r\n  },\r\n}\r\n\r\nwindow.Uploader = Uploader\r\nexport { Auth, Uploader }","import { observable, action } from 'mobx';\r\nimport { Auth } from '../models'\r\n\r\nclass UserStore {\r\n  @observable currentUser = null\r\n  @action pullUser() {\r\n    this.currentUser = Auth.getCurrentUser()\r\n  }\r\n  @action reset() {\r\n    this.currentUser = null\r\n  }\r\n\r\n}\r\nconst userStore = new UserStore()\r\nexport { userStore } ","import { observable, action } from 'mobx';\r\nimport { message } from 'antd';\r\nimport { Uploader } from '../models';\r\n\r\n\r\nclass HistoryStore {\r\n  @observable list = []\r\n  @observable isLoading = false\r\n  @observable hasMore = true\r\n  @observable page = 0\r\n\r\n  @action append(newList) {\r\n    this.list = this.list.concat(newList)\r\n  }\r\n  @action find() {\r\n    this.isLoading = true\r\n    Uploader.find({ page: this.page, limit: 8 })\r\n      .then(newList => {\r\n        this.append(newList)\r\n        this.page++\r\n        if (newList.length < 8) {\r\n          this.hasMore = false\r\n        }\r\n      }).catch(error => {\r\n        message.error('加载数据失败')\r\n      }).finally(() => {\r\n        this.isLoading = false\r\n      })\r\n  }\r\n\r\n  @action react() {\r\n    this.list = []\r\n    this.isLoading = false\r\n    this.hasMore = true\r\n    this.page = 0\r\n  }\r\n  @action reset() {\r\n    this.list = []\r\n    this.page = 0\r\n  }\r\n\r\n}\r\n\r\nconst historyStore = new HistoryStore()\r\nexport { historyStore }","import { observable, action } from 'mobx';\r\nimport { Uploader } from '../models';\r\nimport { message } from 'antd';\r\n\r\n\r\nclass ImageStore {\r\n  @observable file = null\r\n  @observable filename = ''\r\n  @observable isUploading = false\r\n  @observable serverFile = null\r\n\r\n  @action setFilename(newFilename) {\r\n    this.filename = newFilename\r\n  }\r\n\r\n  @action setFile(newFile) {\r\n    this.file = newFile\r\n  }\r\n\r\n  @action upload() {\r\n    this.isUploading = true\r\n    this.serverFile = null\r\n    return new Promise((resolve, reject) => {\r\n      Uploader.add(this.file, this.filename)\r\n        .then(serverFile => {\r\n          this.serverFile = serverFile\r\n          resolve(serverFile)\r\n        }).catch(err => {\r\n          message.error('上传失败')\r\n          reject(err)\r\n        }).finally(() => {\r\n          this.isUploading = false\r\n        })\r\n    })\r\n  }\r\n  @action reset() {\r\n    this.serverFile = null\r\n    this.isUploading = false\r\n  }\r\n}\r\nconst imageStore = new ImageStore()\r\nexport { imageStore }","import { observable, action } from 'mobx';\r\nimport { Auth } from '../models'\r\nimport { userStore } from './user'\r\nimport { message } from 'antd';\r\nimport { historyStore } from './history';\r\nimport { imageStore } from './image';\r\n\r\nclass AuthStore {\r\n  @observable values = {\r\n    username: '',\r\n    password: '',\r\n  };\r\n\r\n  @action setUsername(username) {\r\n    this.values.username = username\r\n  };\r\n\r\n  @action setPassword(password) {\r\n    this.values.password = password\r\n  };\r\n\r\n  @action login() {\r\n    return new Promise((resolve, reject) => {\r\n      Auth.login(this.values.username, this.values.password)\r\n        .then(user => {\r\n          userStore.pullUser()\r\n          resolve(user) //执行login.js中成功代码\r\n        }).catch(error => {\r\n          message.error('登录失败')\r\n          userStore.reset()\r\n          reject(error)\r\n        })\r\n    })\r\n  };\r\n\r\n  @action register() {\r\n    return new Promise((resolve, reject) => {\r\n      Auth.register(this.values.username, this.values.password)\r\n        .then(user => {\r\n          userStore.pullUser()\r\n          resolve(user)\r\n        }).catch(error => {\r\n          message.error('注册失败')\r\n          userStore.reset()\r\n          reject(error)\r\n        })\r\n    })\r\n  }\r\n\r\n  @action logout() {\r\n    Auth.logout()\r\n    userStore.reset()\r\n    imageStore.reset()\r\n    historyStore.reset()\r\n  }\r\n}\r\nconst authStore = new AuthStore()\r\nexport { authStore }","import { createContext, useContext } from 'react'\r\nimport { authStore } from './auth'\r\nimport { userStore } from './user'\r\nimport { imageStore } from './image'\r\nimport { historyStore } from './history'\r\n\r\nwindow.stores = { authStore, userStore, imageStore, historyStore }\r\n\r\nconst context = createContext({ authStore, userStore, imageStore, historyStore })\r\n// useContext读取context的值以及订阅context的变化\r\nconst useStores = () => useContext(context)\r\nexport { useStores }\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.f8bcc3bb.svg\";"],"sourceRoot":""}